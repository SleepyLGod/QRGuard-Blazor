@page "/qrguard/{authcipher}/{*infobase}"

@using System;
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net;
@using System.IO;
@using System.Security.Cryptography;
@inject IHttpClientFactory ClientFactory


<PageTitle>QRGuard</PageTitle>




@if(requested) {
<head>
    <meta charset="utf-8">
    <!--中文编码-->
    <meta name="description" content="An access control system that scans the code to open the door" />
    <!--描述信息-->
    <meta name="keywords" content="QRGuard" />
    <!--设置layout viewport的宽度为设备宽度;初始缩放值为1-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/normalize.css">
    <link rel="stylesheet" href="css/skeleton.css">
    <link rel="stylesheet" href="css/RangeColor.css">
    <!--外部样式表-->
    <link href="https://fonts.googleapis.com/css?family=Bree+Serif" rel="stylesheet">
    <style type="text/css">
        body {background: #f3e3fa;}
        h1 {text-shadow: 2px 3px 1px #ccc;}
        h1,
        h2 {font-family: '微软雅黑'; font-weight:520;}
        h3 {font-family: '微软雅黑'; font-weight:520;}
        h4,
        #select-file {display: none;}
        * { margin: 0; padding: 0;}
        .box {background: radial-gradient(#F6EBFF, #DABEFF);}
        button {
            background-color: rgb(50, 46, 46);
            border: 0 solid rgb(255, 255, 255);
            border-radius: 10px;
            color: #fff;
            padding: 8px;
            box-shadow: 0 0 10px 0 rgb(151, 219, 33), 0 0 10px 0 crimson, 0 0 10px 0 rgb(0, 191, 255) inset;
        }
    </style>
</head>
<body>
   <div class="box"> 
        <div align="center">
            <div class="container" style="padding-top:12px;">
                <div class="row">
                    <div class="twelve columns">
                        @if(avatarPath != null) {
                            <h3>Welcome, @nickName！<img src="@avatarPath" alt="avatar" width=45 height=45/></h3>
                        } else {
                            <h3>Welcome, @nickName!👋👋👋</h3>
                        }
                    </div>
                </div>
            </div>
            <a href = "@qrcodePath">
                <img src="@qrcodePath" alt="QRCode" width=280 height=280/>
            </a>
            <p style="font-family: 'Bree Serif', serif"><font color=#69BAA5>@DateTime.Now</font></p>
            <button class="btn btn-primary" @onclick="qrCodeReq">
                @* <form><input value="ReFresh QRCode" type="submit" /></form> *@
                ReFresh QRCode
            </button>
            <br/>
            <p style="font-family: 'Bree Serif'; font-size: 13px;">
                <font color=light>Tips: Please aim the QRCode at the camera area on the door!</font>
            </p>
            <p style="font-family: 'Bree Serif', serif;font-size: 16px;">
                <font color=darkblue>©By Huxiaoan & Dong, Focus</font>
            </p>
            <br/>
            <span>
                <a href="https://github.com/HuXioAn/QRGuard-Blazor" class="github-corner" aria-label="View source on Github">
                    <svg width="60" height="60" viewBox="0 0 250 250"
                        style="fill:rgb(109, 18, 228); color:rgb(236, 228, 248); position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true">
                        <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
                        <path
                            d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
                            fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm">
                        </path>
                        <path
                            d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
                            fill="currentColor" class="octo-body">
                        </path>
                    </svg>
                </a>
                <style>
                    .github-corner:hover .octo-arm {
                        animation: octocat-wave 560ms ease-in-out
                    }
                </style>
            </span>
        </div>        
    </div>
</body>
} else {
    //请求失败显示
    <h2>请求失败，请重试。</h2>
}




@code {
    [Parameter]
    public string authCipher{set;get;}

    [Parameter]
    public string infoBase{set;get;}

    private string appId = "";

    private string nickName;

    private string name;

    private string avatarPath;

    private string? qrcodePath = null;

    private bool requested = false;

    protected override void OnInitialized(){

        //Console.WriteLine("Access");
        //验证auth
        string timeStamp,sha2Verify;
        try{
            timeStamp = authCipher[0..13];
            sha2Verify = authCipher[13..];
            if(sha2Verify.Length != 40){
                throw new Exception("Error sha length");
            }
        }catch{
            return;
        }

        var shaStr = $"aid:{appId};tm:{timeStamp}";
        var sha1 = SHA1.Create();

        var shaRes = sha1.ComputeHash(System.Text.Encoding.GetEncoding("UTF-8").GetBytes(shaStr));
        var shaResStr = BitConverter.ToString(shaRes).Replace("-","").ToLower();

        if(sha2Verify == shaResStr){
            //pass

            var infoByte = Convert.FromBase64String(infoBase);
            var info = System.Text.Encoding.UTF8.GetString(infoByte);

            var p = info.IndexOf(";");
            if(p == -1)return;

            nickName = info[0..p];
            avatarPath = info[(p+1)..];
            name = BitConverter.ToString(System.Text.Encoding.GetEncoding("UTF-8").GetBytes(nickName)).Replace("-","");
            if(name.Length > 15)name = name[0..15];
            Console.WriteLine(name);
            qrCodeReq(); 
        }else{
            //fail
            requested = false;
            return;
        }
    }

    private void qrCodeReq() {
        if(string.IsNullOrWhiteSpace(name))return;
        requested = false;
        WriteBytesToFile($"./wwwroot/qrcode/{name}.jpg",GetBytesFromUrl($"http://localhost:11451/api/QRGuard/{name}/code"));
        qrcodePath = $"qrcode/{name}.jpg?time=${DateTime.Now.ToFileTime()}";
        requested = true;
        
    }

    private static byte[] GetBytesFromUrl(string url)
        {
            byte[] b;
            HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(url);
            WebResponse myResp = myReq.GetResponse();

            Stream stream = myResp.GetResponseStream();
            using (BinaryReader br = new BinaryReader(stream))
            {
                b = br.ReadBytes(50000);
                br.Close();
            }
            myResp.Close();
            return b;

        }

    private static void WriteBytesToFile(string fileName, byte[] content)
        {
            FileStream fs = new FileStream(fileName, FileMode.Create);
            BinaryWriter w = new BinaryWriter(fs);
            try
            {
                w.Write(content);
            }
            finally
            {
                fs.Close();
                w.Close();
            }

        }

   
}
